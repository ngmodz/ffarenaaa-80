rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Allow read/write access to user's own profile only
    match /users/{userId} {
      // Allow read by the owner
      allow read: if request.auth != null && request.auth.uid == userId;
      
      // Allow creation with slightly more permissive rules - either:
      // 1. The authenticated user is creating their own document
      // 2. The document doesn't exist yet (first creation during registration)
      allow create: if request.auth != null && (
        request.auth.uid == userId || 
        !exists(/databases/$(database)/documents/users/$(userId))
      );
      
      // Normal update rules - only allow the owner to update
      allow update: if request.auth != null && request.auth.uid == userId;
      
      // Don't allow users to delete their profiles
      allow delete: if false;
    }
    
    // Tournament-related rules can be added here if needed
    match /tournaments/{tournamentId} {
      allow read: if true; // Anyone can view tournaments
      allow write: if request.auth != null && 
                    (request.auth.token.admin == true || 
                    resource.data.creatorId == request.auth.uid);
    }
    
    // Allow users to create verification requests for IGN/UID
    match /verification_requests/{requestId} {
      allow read: if request.auth != null && 
                   (resource.data.userId == request.auth.uid ||
                   request.auth.token.admin == true);
      allow create: if request.auth != null && 
                     request.resource.data.userId == request.auth.uid;
      allow update: if request.auth != null && request.auth.token.admin == true;
      allow delete: if request.auth != null && request.auth.token.admin == true;
    }
    
    // Wallet rules - allow users to access only their own wallet
    match /wallets/{userId} {
      allow read: if request.auth != null && request.auth.uid == userId;
      allow create: if request.auth != null && request.auth.uid == userId;
      allow update: if request.auth != null && request.auth.uid == userId;
      allow delete: if false; // Don't allow wallet deletion
    }
    
    // Simplified transaction rules
    match /transactions/{transactionId} {
      // Allow reading any transaction if the user ID matches the authenticated user
      allow read: if request.auth != null && (
        resource.data.userId == request.auth.uid
      );
      
      // Allow creating transactions if userID matches authenticated user
      allow create: if request.auth != null && (
        request.resource.data.userId == request.auth.uid
      );
      
      // No updates or deletions
      allow update: if false;
      allow delete: if false;
    }
    
    // Important: Allow users to list their own transactions
    match /transactions {
      allow list: if request.auth != null && request.query.limit <= 100 && 
                  request.query.where.size() > 0 && 
                  request.query.where[0][0] == 'userId' && 
                  request.query.where[0][1] == '==' && 
                  request.query.where[0][2] == request.auth.uid;
    }
    
    // Explicitly deny access to test_connection collection
    match /test_connection/{document=**} {
      allow read, write: if false;
    }
    
    // Default deny all rule
    match /{document=**} {
      allow read, write: if false;
    }
  }
} 